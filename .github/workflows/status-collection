name: Status Collection Job

# トリガー設定
on:
  schedule:
    # 30分ごとに稼働状況取得を実行
    - cron: '*/30 * * * *'
  workflow_dispatch:  # 手動実行も可能
    inputs:
      log_level:
        description: 'ログレベル'
        required: false
        default: 'INFO'
        type: choice
        options:
        - DEBUG
        - INFO
        - WARNING
        - ERROR

# 環境変数
env:
  PYTHON_VERSION: '3.11'

# 並列実行制御
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  status-collection:
    name: 稼働状況収集ジョブ
    runs-on: ubuntu-latest
    timeout-minutes: 20  # status-collectionは比較的短時間で完了
    
    steps:
    - name: リポジトリのチェックアウト
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Python環境のセットアップ
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'

    - name: 依存関係のインストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 設定ファイルの作成
      working-directory: batch
      run: |
        mkdir -p config
        
        cat > config/secret.yml << 'EOF'
        database:
          password: "${{ secrets.DB_PASSWORD }}"
          url: "${{ secrets.DATABASE_URL }}"
        
        auth:
          secret_key: "${{ secrets.JWT_SECRET_KEY }}"
        
        x_api:
          bearer_token: "${{ secrets.X_API_BEARER_TOKEN }}"
          consumer_key: "${{ secrets.X_API_CONSUMER_KEY }}"
          consumer_secret: "${{ secrets.X_API_CONSUMER_SECRET }}"
          access_token: "${{ secrets.X_API_ACCESS_TOKEN }}"
          access_token_secret: "${{ secrets.X_API_ACCESS_TOKEN_SECRET }}"
        EOF
        
        chmod 600 config/secret.yml
    
    - name: データベース接続テスト
      working-directory: batch
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        LOG_LEVEL: ${{ github.event.inputs.log_level || 'INFO' }}
        PYTHONPATH: ${{ github.workspace }}/batch
      run: |
        echo "データベース接続テストを開始します..."
        python -c "
        import sys
        import logging
        import os
        
        log_level = os.getenv('LOG_LEVEL', 'INFO')
        logging.basicConfig(level=getattr(logging, log_level))
        logger = logging.getLogger(__name__)
        
        try:
            from core.database import DatabaseManager
            logger.info('DatabaseManagerをインポートしました')
            
            db = DatabaseManager()
            logger.info('DatabaseManagerを初期化しました')
            
            with db.get_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute('SELECT 1 as test_value, NOW() as current_time')
                    result = cursor.fetchone()
                    logger.info(f'テストクエリ結果: {result}')
                    print('✅ データベース接続テストが成功しました')
        except Exception as e:
            logger.error(f'データベース接続エラー: {e}')
            print(f'❌ データベース接続に失敗しました: {e}')
            sys.exit(1)
        "
    
    - name: 稼働状況収集ジョブの実行
      working-directory: batch
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        X_API_BEARER_TOKEN: ${{ secrets.X_API_BEARER_TOKEN }}
        X_API_CONSUMER_KEY: ${{ secrets.X_API_CONSUMER_KEY }}
        X_API_CONSUMER_SECRET: ${{ secrets.X_API_CONSUMER_SECRET }}
        X_API_ACCESS_TOKEN: ${{ secrets.X_API_ACCESS_TOKEN }}
        X_API_ACCESS_TOKEN_SECRET: ${{ secrets.X_API_ACCESS_TOKEN_SECRET }}
        LOG_LEVEL: ${{ github.event.inputs.log_level || 'INFO' }}
        ENVIRONMENT: 'production'
        GITHUB_RUN_ID: ${{ github.run_id }}
        GITHUB_RUN_NUMBER: ${{ github.run_number }}
      run: |
        echo "📊 稼働状況収集ジョブを開始します..."
        
        mkdir -p logs
        
        python main.py status-collection 2>&1 | tee logs/status-collection.log
        EXIT_CODE=${PIPESTATUS[0]}
        
        if [ ${EXIT_CODE} -eq 0 ]; then
          echo "✅ 稼働状況収集ジョブが正常に完了しました (終了コード: ${EXIT_CODE})"
        else
          echo "❌ 稼働状況収集ジョブが失敗しました (終了コード: ${EXIT_CODE})"
          exit ${EXIT_CODE}
        fi
    
    - name: ジョブ実行結果の要約
      if: always()
      working-directory: batch
      run: |
        echo "## 📋 稼働状況収集ジョブ実行結果" >> $GITHUB_STEP_SUMMARY
        echo "- **実行時刻**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "- **実行ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo "- **実行番号**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "logs" ] && [ "$(ls -A logs)" ]; then
          echo "- **生成されたログファイル**:" >> $GITHUB_STEP_SUMMARY
          for log_file in logs/*.log; do
            if [ -f "$log_file" ]; then
              file_size=$(stat -f%z "$log_file" 2>/dev/null || stat -c%s "$log_file" 2>/dev/null || echo "不明")
              echo "  - $(basename "$log_file") (${file_size} bytes)" >> $GITHUB_STEP_SUMMARY
            fi
          done
        else
          echo "- **ログファイル**: なし" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: ログファイルのアップロード
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: status-collection-logs-${{ github.run_number }}
        path: batch/logs/
        retention-days: 30
        if-no-files-found: warn
    
    - name: 失敗時の通知準備
      if: failure()
      run: |
        echo "FAILURE_SUMMARY=稼働状況収集ジョブが失敗しました (Run ID: ${{ github.run_id }})" >> $GITHUB_ENV
        echo "FAILURE_DETAILS=詳細はログファイルを確認してください。" >> $GITHUB_ENV
