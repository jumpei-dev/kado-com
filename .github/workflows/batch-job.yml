on:
  schedule:
    # 30分ごとに稼働状況取得を実行
    - cron: '*/30 * * * *'
  workflow_dispatch:  # 手動実行も可能
    inputs:
      job_type:
        description: 'Job type to run'
        required: true
        default: 'status-collection'
        type: choice
        options:
        - status-collection
        - working-rate
        - debug-html

# 並列実行を防ぐためのconcurrency制御
concurrency:
  group: batch-job
  cancel-in-progress: false

jobs:
  batch-execution:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: pip3 install -r requirements.txt
    
    - name: Create config from secrets
      working-directory: batch
      run: |
        mkdir -p config
        echo '${{ secrets.BATCH_CONFIG }}' > config/secret.yml
    
    - name: Database connectivity test
      working-directory: batch
      run: |
        python -c "
        import sys
        try:
            from core.database import DatabaseManager
            db = DatabaseManager()
            with db.get_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute('SELECT 1')
                    result = cursor.fetchone()
                    print('Database connection successful')
        except Exception as e:
            print(f'Database connection failed: {e}')
            sys.exit(1)
        "
    
    - name: Run batch job
      working-directory: batch
      run: |
        set -e  # エラー時に即座に終了
        case "${{ github.event.inputs.job_type || 'status-collection' }}" in
          "status-collection")
            python main.py status-collection
            ;;
          "working-rate")
            python main.py working-rate
            ;;
          "debug-html")
            python main.py debug-html --local-file "sample.html"
            ;;
        esac
        
        # ジョブ実行結果の確認
        if [ $? -ne 0 ]; then
          echo "Batch job failed with exit code $?"
          exit 1
        fi
    
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: batch-logs-${{ github.event.inputs.job_type || 'status-collection' }}
        path: batch/logs/
